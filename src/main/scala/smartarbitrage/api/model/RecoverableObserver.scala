package smartarbitrage.api.model

import scala.util.Try

/**
 * A recoverable observer is an object used to detect if an exception generated by an order monitoring action can be recovered.
 * It's exchange specific.
 *
 * @author Stefano Volponi.
 * @implNote The interface provides just a single method called { @link smartarbitrage.exchange.model.RecoverableObserver#recover(Throwable) recover}.
 */
trait RecoverableObserver {
  /**
   * Provide a new {@link scala.util.Try} of a {@link smartarbitrage.exchange.model.OrderSnapshot snapshot} to be used instead
   * of the faulty one if the Exception `<code>e</code>` is considered recoverable.
   *
   * @param e The exception that needs to be recovered
   * @return the new snapshot try
   * @implNote Default implementation should just return the exception `<code>e</code>` wrapped in a { @link scala.util.Try}
   */
  def recover(e: Throwable): Try[OrderSnapshot]
}
