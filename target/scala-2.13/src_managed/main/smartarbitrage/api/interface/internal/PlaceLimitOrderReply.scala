// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package smartarbitrage.api.interface.internal

@SerialVersionUID(0L)
final case class PlaceLimitOrderReply(
    id: _root_.scala.Predef.String = "",
    status: _root_.scala.Option[smartarbitrage.api.interface.internal.OrderStatusTypeBox] = _root_.scala.None,
    cancelReason: _root_.scala.Option[smartarbitrage.api.interface.internal.CancelReasonTypeBox] = _root_.scala.None
    ) extends scalapb.GeneratedMessage with scalapb.Message[PlaceLimitOrderReply] with scalapb.lenses.Updatable[PlaceLimitOrderReply] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (status.isDefined) {
        val __value = status.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (cancelReason.isDefined) {
        val __value = cancelReason.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      status.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      cancelReason.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): smartarbitrage.api.interface.internal.PlaceLimitOrderReply = {
      var __id = this.id
      var __status = this.status
      var __cancelReason = this.cancelReason
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __id = _input__.readString()
          case 18 =>
            __status = Option(_root_.scalapb.LiteParser.readMessage(_input__, __status.getOrElse(smartarbitrage.api.interface.internal.OrderStatusTypeBox.defaultInstance)))
          case 26 =>
            __cancelReason = Option(_root_.scalapb.LiteParser.readMessage(_input__, __cancelReason.getOrElse(smartarbitrage.api.interface.internal.CancelReasonTypeBox.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      smartarbitrage.api.interface.internal.PlaceLimitOrderReply(
          id = __id,
          status = __status,
          cancelReason = __cancelReason
      )
    }
    def withId(__v: _root_.scala.Predef.String): PlaceLimitOrderReply = copy(id = __v)
    def getStatus: smartarbitrage.api.interface.internal.OrderStatusTypeBox = status.getOrElse(smartarbitrage.api.interface.internal.OrderStatusTypeBox.defaultInstance)
    def clearStatus: PlaceLimitOrderReply = copy(status = _root_.scala.None)
    def withStatus(__v: smartarbitrage.api.interface.internal.OrderStatusTypeBox): PlaceLimitOrderReply = copy(status = Option(__v))
    def getCancelReason: smartarbitrage.api.interface.internal.CancelReasonTypeBox = cancelReason.getOrElse(smartarbitrage.api.interface.internal.CancelReasonTypeBox.defaultInstance)
    def clearCancelReason: PlaceLimitOrderReply = copy(cancelReason = _root_.scala.None)
    def withCancelReason(__v: smartarbitrage.api.interface.internal.CancelReasonTypeBox): PlaceLimitOrderReply = copy(cancelReason = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != "") __t else null
        }
        case 2 => status.orNull
        case 3 => cancelReason.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(id)
        case 2 => status.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => cancelReason.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = smartarbitrage.api.interface.internal.PlaceLimitOrderReply
}

object PlaceLimitOrderReply extends scalapb.GeneratedMessageCompanion[smartarbitrage.api.interface.internal.PlaceLimitOrderReply] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[smartarbitrage.api.interface.internal.PlaceLimitOrderReply] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): smartarbitrage.api.interface.internal.PlaceLimitOrderReply = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    smartarbitrage.api.interface.internal.PlaceLimitOrderReply(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[smartarbitrage.api.interface.internal.OrderStatusTypeBox]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[smartarbitrage.api.interface.internal.CancelReasonTypeBox]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[smartarbitrage.api.interface.internal.PlaceLimitOrderReply] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      smartarbitrage.api.interface.internal.PlaceLimitOrderReply(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[smartarbitrage.api.interface.internal.OrderStatusTypeBox]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[smartarbitrage.api.interface.internal.CancelReasonTypeBox]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GatewayApiProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GatewayApiProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = smartarbitrage.api.interface.internal.OrderStatusTypeBox
      case 3 => __out = smartarbitrage.api.interface.internal.CancelReasonTypeBox
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = smartarbitrage.api.interface.internal.PlaceLimitOrderReply(
    id = "",
    status = _root_.scala.None,
    cancelReason = _root_.scala.None
  )
  implicit class PlaceLimitOrderReplyLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, smartarbitrage.api.interface.internal.PlaceLimitOrderReply]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, smartarbitrage.api.interface.internal.PlaceLimitOrderReply](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def status: _root_.scalapb.lenses.Lens[UpperPB, smartarbitrage.api.interface.internal.OrderStatusTypeBox] = field(_.getStatus)((c_, f_) => c_.copy(status = Option(f_)))
    def optionalStatus: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[smartarbitrage.api.interface.internal.OrderStatusTypeBox]] = field(_.status)((c_, f_) => c_.copy(status = f_))
    def cancelReason: _root_.scalapb.lenses.Lens[UpperPB, smartarbitrage.api.interface.internal.CancelReasonTypeBox] = field(_.getCancelReason)((c_, f_) => c_.copy(cancelReason = Option(f_)))
    def optionalCancelReason: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[smartarbitrage.api.interface.internal.CancelReasonTypeBox]] = field(_.cancelReason)((c_, f_) => c_.copy(cancelReason = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val STATUS_FIELD_NUMBER = 2
  final val CANCELREASON_FIELD_NUMBER = 3
  def of(
    id: _root_.scala.Predef.String,
    status: _root_.scala.Option[smartarbitrage.api.interface.internal.OrderStatusTypeBox],
    cancelReason: _root_.scala.Option[smartarbitrage.api.interface.internal.CancelReasonTypeBox]
  ): _root_.smartarbitrage.api.interface.internal.PlaceLimitOrderReply = _root_.smartarbitrage.api.interface.internal.PlaceLimitOrderReply(
    id,
    status,
    cancelReason
  )
}
