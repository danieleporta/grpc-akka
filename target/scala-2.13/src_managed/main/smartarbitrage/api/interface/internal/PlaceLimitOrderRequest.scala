// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package smartarbitrage.api.interface.internal

@SerialVersionUID(0L)
final case class PlaceLimitOrderRequest(
    exchangeUri: _root_.scala.Predef.String = "",
    order: smartarbitrage.api.interface.internal.LimitOrder = smartarbitrage.api.interface.internal.LimitOrder.defaultInstance,
    swap: _root_.scala.Option[smartarbitrage.api.interface.internal.Forex] = _root_.scala.None
    ) extends scalapb.GeneratedMessage with scalapb.Message[PlaceLimitOrderRequest] with scalapb.lenses.Updatable[PlaceLimitOrderRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = exchangeUri
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = order
        if (__value != smartarbitrage.api.interface.internal.LimitOrder.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      if (swap.isDefined) {
        val __value = swap.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = exchangeUri
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = order
        if (__v != smartarbitrage.api.interface.internal.LimitOrder.defaultInstance) {
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      swap.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): smartarbitrage.api.interface.internal.PlaceLimitOrderRequest = {
      var __exchangeUri = this.exchangeUri
      var __order = this.order
      var __swap = this.swap
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __exchangeUri = _input__.readString()
          case 18 =>
            __order = _root_.scalapb.LiteParser.readMessage(_input__, __order)
          case 26 =>
            __swap = Option(_root_.scalapb.LiteParser.readMessage(_input__, __swap.getOrElse(smartarbitrage.api.interface.internal.Forex.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      smartarbitrage.api.interface.internal.PlaceLimitOrderRequest(
          exchangeUri = __exchangeUri,
          order = __order,
          swap = __swap
      )
    }
    def withExchangeUri(__v: _root_.scala.Predef.String): PlaceLimitOrderRequest = copy(exchangeUri = __v)
    def withOrder(__v: smartarbitrage.api.interface.internal.LimitOrder): PlaceLimitOrderRequest = copy(order = __v)
    def getSwap: smartarbitrage.api.interface.internal.Forex = swap.getOrElse(smartarbitrage.api.interface.internal.Forex.defaultInstance)
    def clearSwap: PlaceLimitOrderRequest = copy(swap = _root_.scala.None)
    def withSwap(__v: smartarbitrage.api.interface.internal.Forex): PlaceLimitOrderRequest = copy(swap = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = exchangeUri
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = order
          if (__t != smartarbitrage.api.interface.internal.LimitOrder.defaultInstance) __t else null
        }
        case 3 => swap.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(exchangeUri)
        case 2 => order.toPMessage
        case 3 => swap.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = smartarbitrage.api.interface.internal.PlaceLimitOrderRequest
}

object PlaceLimitOrderRequest extends scalapb.GeneratedMessageCompanion[smartarbitrage.api.interface.internal.PlaceLimitOrderRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[smartarbitrage.api.interface.internal.PlaceLimitOrderRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): smartarbitrage.api.interface.internal.PlaceLimitOrderRequest = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    smartarbitrage.api.interface.internal.PlaceLimitOrderRequest(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), smartarbitrage.api.interface.internal.LimitOrder.defaultInstance).asInstanceOf[smartarbitrage.api.interface.internal.LimitOrder],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[smartarbitrage.api.interface.internal.Forex]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[smartarbitrage.api.interface.internal.PlaceLimitOrderRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      smartarbitrage.api.interface.internal.PlaceLimitOrderRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[smartarbitrage.api.interface.internal.LimitOrder]).getOrElse(smartarbitrage.api.interface.internal.LimitOrder.defaultInstance),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[smartarbitrage.api.interface.internal.Forex]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GatewayApiProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GatewayApiProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = smartarbitrage.api.interface.internal.LimitOrder
      case 3 => __out = smartarbitrage.api.interface.internal.Forex
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = smartarbitrage.api.interface.internal.PlaceLimitOrderRequest(
    exchangeUri = "",
    order = smartarbitrage.api.interface.internal.LimitOrder.defaultInstance,
    swap = _root_.scala.None
  )
  implicit class PlaceLimitOrderRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, smartarbitrage.api.interface.internal.PlaceLimitOrderRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, smartarbitrage.api.interface.internal.PlaceLimitOrderRequest](_l) {
    def exchangeUri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.exchangeUri)((c_, f_) => c_.copy(exchangeUri = f_))
    def order: _root_.scalapb.lenses.Lens[UpperPB, smartarbitrage.api.interface.internal.LimitOrder] = field(_.order)((c_, f_) => c_.copy(order = f_))
    def swap: _root_.scalapb.lenses.Lens[UpperPB, smartarbitrage.api.interface.internal.Forex] = field(_.getSwap)((c_, f_) => c_.copy(swap = Option(f_)))
    def optionalSwap: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[smartarbitrage.api.interface.internal.Forex]] = field(_.swap)((c_, f_) => c_.copy(swap = f_))
  }
  final val EXCHANGEURI_FIELD_NUMBER = 1
  final val ORDER_FIELD_NUMBER = 2
  final val SWAP_FIELD_NUMBER = 3
  def of(
    exchangeUri: _root_.scala.Predef.String,
    order: smartarbitrage.api.interface.internal.LimitOrder,
    swap: _root_.scala.Option[smartarbitrage.api.interface.internal.Forex]
  ): _root_.smartarbitrage.api.interface.internal.PlaceLimitOrderRequest = _root_.smartarbitrage.api.interface.internal.PlaceLimitOrderRequest(
    exchangeUri,
    order,
    swap
  )
}
