package smartarbitrage.api.adapter

import smartarbitrage.api.builder.OrderTypeBuilder
import smartarbitrage.api.model.{LimitOrder, OrderType}
import smartarbitrage.api.model.OrderType.OrderType
import smartarbitrage.api.interface.internal.{LimitOrder ⇒ LimitOrderInternal, OrderType ⇒ OrderTypeInternal}

class LimitOrderAdapter(loi: LimitOrderInternal) extends LimitOrder {
  /**
   * Quotation pair code (e.g. btcusd, btceur, ethusd, ecc.)
   *
   * @return Quotation code
   */
  override def getQCode: String = loi.qcode

  override def getSide: OrderType = OrderTypeBuilder.build(loi.side)

  override def getQuantity: java.math.BigDecimal = BigDecimal(loi.quantity).bigDecimal

  override def getPrice: java.math.BigDecimal = BigDecimal(loi.price).bigDecimal

  override def isPostOnly: Boolean = loi.postOnly

  override def getLeverage: Int = loi.leverage

  /**
   * Currency code (e.g. btc, usd, eth, eur, ecc.) used to indicate collateral in margin order
   *
   * @return Currency code
   */
  override def getCollateralCurrency: Option[String] = loi.collateralCurrency

  /**
   * Correlation id is generated by Smart Arbitrage and used on order placement to check if order is successfully placed
   *
   * @return Correlation Id
   */
  override def getCorrelationId: Option[String] = loi.correlationId
}
