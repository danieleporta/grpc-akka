// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package smartarbitrage.api.interface.internal

/** @param quantity
  *  BigDecimal
  * @param price
  *  BigDecimal
  * @param collateralCurrency
  *   map Option[String]
  * @param correlationId
  *   map Option[String]
  */
@SerialVersionUID(0L)
final case class LimitOrder(
    qcode: _root_.scala.Predef.String = "",
    side: smartarbitrage.api.interface.internal.OrderType = smartarbitrage.api.interface.internal.OrderType.BID,
    quantity: _root_.scala.Predef.String = "",
    price: _root_.scala.Predef.String = "",
    postOnly: _root_.scala.Boolean = false,
    leverage: _root_.scala.Int = 0,
    collateralCurrency: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    correlationId: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    ) extends scalapb.GeneratedMessage with scalapb.Message[LimitOrder] with scalapb.lenses.Updatable[LimitOrder] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = qcode
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = side
        if (__value != smartarbitrage.api.interface.internal.OrderType.BID) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value.value)
        }
      };
      
      {
        val __value = quantity
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = price
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = postOnly
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      
      {
        val __value = leverage
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(6, __value)
        }
      };
      if (collateralCurrency.isDefined) {
        val __value = smartarbitrage.api.interface.internal.LimitOrder._typemapper_collateralCurrency.toBase(collateralCurrency.get)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (correlationId.isDefined) {
        val __value = smartarbitrage.api.interface.internal.LimitOrder._typemapper_correlationId.toBase(correlationId.get)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = qcode
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = side
        if (__v != smartarbitrage.api.interface.internal.OrderType.BID) {
          _output__.writeEnum(2, __v.value)
        }
      };
      {
        val __v = quantity
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = price
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = postOnly
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      {
        val __v = leverage
        if (__v != 0) {
          _output__.writeInt32(6, __v)
        }
      };
      collateralCurrency.foreach { __v =>
        val __m = smartarbitrage.api.interface.internal.LimitOrder._typemapper_collateralCurrency.toBase(__v)
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      correlationId.foreach { __v =>
        val __m = smartarbitrage.api.interface.internal.LimitOrder._typemapper_correlationId.toBase(__v)
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): smartarbitrage.api.interface.internal.LimitOrder = {
      var __qcode = this.qcode
      var __side = this.side
      var __quantity = this.quantity
      var __price = this.price
      var __postOnly = this.postOnly
      var __leverage = this.leverage
      var __collateralCurrency = this.collateralCurrency
      var __correlationId = this.correlationId
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __qcode = _input__.readString()
          case 16 =>
            __side = smartarbitrage.api.interface.internal.OrderType.fromValue(_input__.readEnum())
          case 26 =>
            __quantity = _input__.readString()
          case 34 =>
            __price = _input__.readString()
          case 40 =>
            __postOnly = _input__.readBool()
          case 48 =>
            __leverage = _input__.readInt32()
          case 58 =>
            __collateralCurrency = Option(smartarbitrage.api.interface.internal.LimitOrder._typemapper_collateralCurrency.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, __collateralCurrency.map(smartarbitrage.api.interface.internal.LimitOrder._typemapper_collateralCurrency.toBase).getOrElse(com.google.protobuf.wrappers.StringValue.defaultInstance))))
          case 66 =>
            __correlationId = Option(smartarbitrage.api.interface.internal.LimitOrder._typemapper_correlationId.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, __correlationId.map(smartarbitrage.api.interface.internal.LimitOrder._typemapper_correlationId.toBase).getOrElse(com.google.protobuf.wrappers.StringValue.defaultInstance))))
          case tag => _input__.skipField(tag)
        }
      }
      smartarbitrage.api.interface.internal.LimitOrder(
          qcode = __qcode,
          side = __side,
          quantity = __quantity,
          price = __price,
          postOnly = __postOnly,
          leverage = __leverage,
          collateralCurrency = __collateralCurrency,
          correlationId = __correlationId
      )
    }
    def withQcode(__v: _root_.scala.Predef.String): LimitOrder = copy(qcode = __v)
    def withSide(__v: smartarbitrage.api.interface.internal.OrderType): LimitOrder = copy(side = __v)
    def withQuantity(__v: _root_.scala.Predef.String): LimitOrder = copy(quantity = __v)
    def withPrice(__v: _root_.scala.Predef.String): LimitOrder = copy(price = __v)
    def withPostOnly(__v: _root_.scala.Boolean): LimitOrder = copy(postOnly = __v)
    def withLeverage(__v: _root_.scala.Int): LimitOrder = copy(leverage = __v)
    def getCollateralCurrency: _root_.scala.Predef.String = collateralCurrency.getOrElse(smartarbitrage.api.interface.internal.LimitOrder._typemapper_collateralCurrency.toCustom(com.google.protobuf.wrappers.StringValue.defaultInstance))
    def clearCollateralCurrency: LimitOrder = copy(collateralCurrency = _root_.scala.None)
    def withCollateralCurrency(__v: _root_.scala.Predef.String): LimitOrder = copy(collateralCurrency = Option(__v))
    def getCorrelationId: _root_.scala.Predef.String = correlationId.getOrElse(smartarbitrage.api.interface.internal.LimitOrder._typemapper_correlationId.toCustom(com.google.protobuf.wrappers.StringValue.defaultInstance))
    def clearCorrelationId: LimitOrder = copy(correlationId = _root_.scala.None)
    def withCorrelationId(__v: _root_.scala.Predef.String): LimitOrder = copy(correlationId = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = qcode
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = side.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 3 => {
          val __t = quantity
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = price
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = postOnly
          if (__t != false) __t else null
        }
        case 6 => {
          val __t = leverage
          if (__t != 0) __t else null
        }
        case 7 => collateralCurrency.map(smartarbitrage.api.interface.internal.LimitOrder._typemapper_collateralCurrency.toBase).orNull
        case 8 => correlationId.map(smartarbitrage.api.interface.internal.LimitOrder._typemapper_correlationId.toBase).orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(qcode)
        case 2 => _root_.scalapb.descriptors.PEnum(side.scalaValueDescriptor)
        case 3 => _root_.scalapb.descriptors.PString(quantity)
        case 4 => _root_.scalapb.descriptors.PString(price)
        case 5 => _root_.scalapb.descriptors.PBoolean(postOnly)
        case 6 => _root_.scalapb.descriptors.PInt(leverage)
        case 7 => collateralCurrency.map(smartarbitrage.api.interface.internal.LimitOrder._typemapper_collateralCurrency.toBase(_).toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => correlationId.map(smartarbitrage.api.interface.internal.LimitOrder._typemapper_correlationId.toBase(_).toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = smartarbitrage.api.interface.internal.LimitOrder
}

object LimitOrder extends scalapb.GeneratedMessageCompanion[smartarbitrage.api.interface.internal.LimitOrder] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[smartarbitrage.api.interface.internal.LimitOrder] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): smartarbitrage.api.interface.internal.LimitOrder = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    smartarbitrage.api.interface.internal.LimitOrder(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      smartarbitrage.api.interface.internal.OrderType.fromValue(__fieldsMap.getOrElse(__fields.get(1), smartarbitrage.api.interface.internal.OrderType.BID.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), false).asInstanceOf[_root_.scala.Boolean],
      __fieldsMap.getOrElse(__fields.get(5), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[_root_.scala.Option[com.google.protobuf.wrappers.StringValue]].map(smartarbitrage.api.interface.internal.LimitOrder._typemapper_collateralCurrency.toCustom),
      __fieldsMap.get(__fields.get(7)).asInstanceOf[_root_.scala.Option[com.google.protobuf.wrappers.StringValue]].map(smartarbitrage.api.interface.internal.LimitOrder._typemapper_correlationId.toCustom)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[smartarbitrage.api.interface.internal.LimitOrder] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      smartarbitrage.api.interface.internal.LimitOrder(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        smartarbitrage.api.interface.internal.OrderType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(smartarbitrage.api.interface.internal.OrderType.BID.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.wrappers.StringValue]]).map(smartarbitrage.api.interface.internal.LimitOrder._typemapper_collateralCurrency.toCustom),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.wrappers.StringValue]]).map(smartarbitrage.api.interface.internal.LimitOrder._typemapper_correlationId.toCustom)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = CommonsProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = CommonsProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 7 => __out = com.google.protobuf.wrappers.StringValue
      case 8 => __out = com.google.protobuf.wrappers.StringValue
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => smartarbitrage.api.interface.internal.OrderType
    }
  }
  lazy val defaultInstance = smartarbitrage.api.interface.internal.LimitOrder(
    qcode = "",
    side = smartarbitrage.api.interface.internal.OrderType.BID,
    quantity = "",
    price = "",
    postOnly = false,
    leverage = 0,
    collateralCurrency = _root_.scala.None,
    correlationId = _root_.scala.None
  )
  implicit class LimitOrderLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, smartarbitrage.api.interface.internal.LimitOrder]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, smartarbitrage.api.interface.internal.LimitOrder](_l) {
    def qcode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.qcode)((c_, f_) => c_.copy(qcode = f_))
    def side: _root_.scalapb.lenses.Lens[UpperPB, smartarbitrage.api.interface.internal.OrderType] = field(_.side)((c_, f_) => c_.copy(side = f_))
    def quantity: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.quantity)((c_, f_) => c_.copy(quantity = f_))
    def price: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.price)((c_, f_) => c_.copy(price = f_))
    def postOnly: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.postOnly)((c_, f_) => c_.copy(postOnly = f_))
    def leverage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.leverage)((c_, f_) => c_.copy(leverage = f_))
    def collateralCurrency: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCollateralCurrency)((c_, f_) => c_.copy(collateralCurrency = Option(f_)))
    def optionalCollateralCurrency: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.collateralCurrency)((c_, f_) => c_.copy(collateralCurrency = f_))
    def correlationId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCorrelationId)((c_, f_) => c_.copy(correlationId = Option(f_)))
    def optionalCorrelationId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.correlationId)((c_, f_) => c_.copy(correlationId = f_))
  }
  final val QCODE_FIELD_NUMBER = 1
  final val SIDE_FIELD_NUMBER = 2
  final val QUANTITY_FIELD_NUMBER = 3
  final val PRICE_FIELD_NUMBER = 4
  final val POSTONLY_FIELD_NUMBER = 5
  final val LEVERAGE_FIELD_NUMBER = 6
  final val COLLATERALCURRENCY_FIELD_NUMBER = 7
  final val CORRELATIONID_FIELD_NUMBER = 8
  @transient
  private val _typemapper_collateralCurrency: _root_.scalapb.TypeMapper[com.google.protobuf.wrappers.StringValue, _root_.scala.Predef.String] = implicitly[_root_.scalapb.TypeMapper[com.google.protobuf.wrappers.StringValue, _root_.scala.Predef.String]]
  @transient
  private val _typemapper_correlationId: _root_.scalapb.TypeMapper[com.google.protobuf.wrappers.StringValue, _root_.scala.Predef.String] = implicitly[_root_.scalapb.TypeMapper[com.google.protobuf.wrappers.StringValue, _root_.scala.Predef.String]]
  def of(
    qcode: _root_.scala.Predef.String,
    side: smartarbitrage.api.interface.internal.OrderType,
    quantity: _root_.scala.Predef.String,
    price: _root_.scala.Predef.String,
    postOnly: _root_.scala.Boolean,
    leverage: _root_.scala.Int,
    collateralCurrency: _root_.scala.Option[_root_.scala.Predef.String],
    correlationId: _root_.scala.Option[_root_.scala.Predef.String]
  ): _root_.smartarbitrage.api.interface.internal.LimitOrder = _root_.smartarbitrage.api.interface.internal.LimitOrder(
    qcode,
    side,
    quantity,
    price,
    postOnly,
    leverage,
    collateralCurrency,
    correlationId
  )
}
