
// Generated by Akka gRPC. DO NOT EDIT.
package smartarbitrage.api.interface.internal


trait GatewayApiService {
  
  
  def getPositions(in: smartarbitrage.api.interface.internal.PositionRequest): akka.stream.scaladsl.Source[smartarbitrage.api.interface.internal.PositionReply, akka.NotUsed]
  
  
  def placeLimitOrder(in: smartarbitrage.api.interface.internal.PlaceLimitOrderRequest): scala.concurrent.Future[smartarbitrage.api.interface.internal.PlaceLimitOrderReply]
  
}

object GatewayApiService {
  val name = "smartarbitrage.api.interface.internal.GatewayApiService"

  object Serializers {
    import akka.grpc.scaladsl.ScalapbProtobufSerializer
    
    val PositionRequestSerializer = new ScalapbProtobufSerializer(smartarbitrage.api.interface.internal.PositionRequest.messageCompanion)
    
    val PlaceLimitOrderRequestSerializer = new ScalapbProtobufSerializer(smartarbitrage.api.interface.internal.PlaceLimitOrderRequest.messageCompanion)
    
    val PositionReplySerializer = new ScalapbProtobufSerializer(smartarbitrage.api.interface.internal.PositionReply.messageCompanion)
    
    val PlaceLimitOrderReplySerializer = new ScalapbProtobufSerializer(smartarbitrage.api.interface.internal.PlaceLimitOrderReply.messageCompanion)
    
  }
}
